# -*- coding: utf-8 -*-
"""7Emotions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LcOAaRlqZwt-gKwD8oyYVQhtr4sLbCnU
"""

from zipfile import ZipFile
file_name = 'data.zip'

with ZipFile(file_name,'r') as zip:
  zip.extractall()
  print('Done')

import pandas as pd
import numpy as np
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D,Flatten,Dense,Dropout
from keras.preprocessing.image import ImageDataGenerator

#Setting the parameters
input_shape = (48, 48, 1)
img_width = 48
img_height = 48
num_classes = 7
nb_train_samples = 28709
nb_test_samples = 7178
batch_size = 64
epochs = 50

from keras.utils.np_utils import to_categorical
train_data_dir = 'data/train'
test_data_dir = 'data/test'
#y_train = to_categorical('data/train',7)
#y_test = to_categorical('data/test',7)

train_data_dir = ImageDataGenerator(rescale=1./255)
test_data_dir = ImageDataGenerator(rescale=1./255)

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   rotation_range = 10,
                                   width_shift_range = 0.25,
                                   height_shift_range = 0.25,
                                   shear_range=0.5,
                                   zoom_range=0.5,
                                   horizontal_flip = False,
                                   fill_mode = 'nearest')
train_generator = train_datagen.flow_from_directory(train_data_dir,
                                                    target_size = (img_width, img_height),
                                                    batch_size = batch_size,
                                                    class_mode = 'categorical')

test_datagen = ImageDataGenerator(rescale = 1./255)
test_generator = test_datagen.flow_from_directory(test_data_dir,
                                                  target_size = (img_width, img_height),
                                                  batch_size = batch_size,
                                                  class_mode = 'categorical',
                                                  shuffle = False)

model = Sequential()

model.add(Convolution2D(32, kernel_size=(3, 3), activation='relu', input_shape=(48,48,3)))
model.add(Convolution2D(64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Convolution2D(128, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Convolution2D(128, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(1024, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(7, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit_generator(train_generator,
                              steps_per_epoch = nb_train_samples // batch_size,
                              epochs = epochs,
                              #callbacks = callbacks,
                              validation_data = test_generator,
                              validation_steps = nb_test_samples // batch_size)

import cv2
import sys
cascPath = sys.argv[1]
faceCascade = cv2.CascadeClassifier(cascPath)

# start the webcam feed
    cap = cv2.VideoCapture(0)
    font = cv2.FONT_HERSHEY_SIMPLEX
    feelings_faces = []
    
    while True:
        # Find haar cascade to draw bounding box around face
        ret, frame = cap.read()
        if not ret:
            break
        facecasc = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = facecasc.detectMultiScale(gray,scaleFactor=1.3, minNeighbors=5)

        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y-50), (x+w, y+h+10), (255, 0, 0), 2)
            roi_gray = gray[y:y + h, x:x + w]
            cropped_img = np.expand_dims(np.expand_dims(cv2.resize(roi_gray, (48, 48)), -1), 0)
            prediction = model.predict(cropped_img)
            maxindex = int(np.argmax(prediction))
            cv2.putText(frame, emotion_dict[maxindex], (x+20, y-60), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)

        cv2.imshow('Video', cv2.resize(frame,(1600,960),interpolation = cv2.INTER_CUBIC))
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    #cap.release()
    #cv2.destroyAllWindows()

#mode == "display":
    model.load_weights('model.h5')

    # prevents openCL usage and unnecessary logging messages
    cv2.ocl.setUseOpenCL(False)

    # dictionary which assigns each label an emotion (alphabetical order)
    emotion_dict = {0: "Angry", 1: "Disgusted", 2: "Fearful", 3: "Happy", 4: "Neutral", 5: "Sad", 6: "Surprised"}