# -*- coding: utf-8 -*-
"""Fashion_MNIST_soln.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QqRC8Zw5HuoVn-3olThcJ0Wb8xL_e6y6
"""

from keras.datasets import fashion_mnist

(x_train,y_train),(x_test,y_test) = fashion_mnist.load_data()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.imshow(x_train[0])

x_train = x_train/x_train.max()
x_test = x_test/x_train.max()

x_train.shape

x_train = x_train.reshape(60000, 28, 28, 1)
x_test = x_test.reshape(10000, 28, 28, 1)

from keras.utils import to_categorical
y_cat_train = to_categorical(y_train,10)
y_cat_test = to_categorical(y_test,10)

from keras.models import Sequential
from keras.layers import Dense,Conv2D,MaxPool2D,Flatten

model = Sequential()

#First set of layers
#Convolutional Layer 1
model.add(Conv2D(filters=32,kernel_size=(4,4),input_shape=(28,28,1),activation='relu'))
#Convolutional Layer 2
#model.add(Conv2D(filters=32,kernel_size=(4,4),input_shape=(28,28,1),activation='relu'))
#Pooling Layer
model.add(MaxPool2D(pool_size=(2,2)))

#Second set of layers
#Convolutional Layer 1
#model.add(Conv2D(filters=64,kernel_size=(4,4),input_shape=(28,28,1),activation='relu'))
#Convolutional Layer 2
#model.add(Conv2D(filters=64,kernel_size=(4,4),input_shape=(28,28,1),activation='relu'))
#Pooling Layer
#model.add(MaxPool2D(pool_size=(2,2)))

#Flattening from 28 by 28 to 764
model.add(Flatten())
#Hidden Layer
model.add(Dense(128,activation='relu'))
model.add(Dense(10,activation='softmax'))

model.compile(loss='categorical_crossentropy',optimizer='rmsprop',metrics=['accuracy'])

model.summary()

model.fit(x_train,y_cat_train,verbose=1,epochs=10)

model.metrics_names

model.evaluate(x_test,y_cat_test)

from sklearn.metrics import classification_report
predictions = model.predict_classes(x_test)
print(classification_report(y_test,predictions))