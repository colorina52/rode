# -*- coding: utf-8 -*-
"""RAF-DB

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AZOsFcyqa8N0lL3bmK9K0lKV4S567klt
"""

from google.colab import drive
drive.mount('/content/drive')

cd drive

cd My Drive

cd SOP_EmotionDetection

import numpy as np
X = np.load('X-filters.npy')
X = np.expand_dims(X, axis=3)
print(X.shape)
y = np.load('Y-filters.npy')
print(y.shape)

from sklearn.model_selection import train_test_split
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, stratify=y)
X_val, X_test, y_val, y_test = train_test_split(X_val, y_val, test_size=0.5, stratify=y_val)

print(X_train.shape)
print(y_train.shape)
print(X_val.shape)
print(y_val.shape)
print(X_test.shape)
print(y_test.shape)

from keras.models import Sequential
from keras.models import Model
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import RMSprop
from keras.callbacks import *
from keras.layers import *

from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D, Flatten, Dense, Dropout, AveragePooling2D, BatchNormalization

model = Sequential()

model.add(Convolution2D(64, kernel_size=(3, 3), activation='relu', input_shape=(100,100,1)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))


model.add(Convolution2D(96, kernel_size=(3, 3), activation='relu', input_shape=(100,100,1)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(128, kernel_size=(3, 3), activation='relu'))
model.add(Convolution2D(128, kernel_size=(3, 3), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(256, kernel_size=(3, 3), activation='relu'))
model.add(Convolution2D(256, kernel_size=(3, 3), activation='relu'))
model.add(BatchNormalization())
model.add(AveragePooling2D(5,5))
model.add(Dropout(0.5))

model.add(Flatten())
model.add(Dense(11, activation='softmax'))
model.summary()

import matplotlib.pyplot as plt
from keras.optimizers import SGD
from keras.utils import plot_model
from keras.callbacks import ModelCheckpoint, ReduceLROnPlateau

learning_rate = 0.01
momentum = 0.9
patienceLR = 3
factor = 0.1
batch_size = 64
epochs = 50

checkpoint = ModelCheckpoint("emotion.h5",
                             monitor = 'val_acc',
                             mode = 'max',
                             save_best_only = True,
                             verbose = 1)

reduce_lr = ReduceLROnPlateau(monitor = 'val_loss',
							                factor = factor,
                              mode = 'min',
							                patience = patienceLR,
							                verbose = 1)
						  
callbacks = [checkpoint, reduce_lr]

model.compile(loss = 'categorical_crossentropy', optimizer = SGD(lr=learning_rate, momentum=momentum, nesterov=True), metrics = ['accuracy'])

history = model.fit(X_train, y_train,
                    validation_data = (X_val, y_val),
                    epochs = epochs, batch_size = batch_size,
                    verbose = 1, callbacks = callbacks)

N = 50
plt.style.use("ggplot")
plt.figure()
plt.plot(np.arange(0, N), history.history["loss"], label="train_loss")
plt.plot(np.arange(0, N), history.history["val_loss"], label="val_loss")
plt.plot(np.arange(0, N), history.history["acc"], label="train_acc")
plt.plot(np.arange(0, N), history.history["val_acc"], label="val_acc")
plt.title("Training Loss and Accuracy on Dataset")
plt.xlabel("Epoch #")
plt.ylabel("Loss/Accuracy")
plt.legend(loc="upper right")
plt.savefig("plot.png")

